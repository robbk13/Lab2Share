'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="lab2share")>  _
Partial Public Class markupDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertContent(instance As Content)
    End Sub
  Partial Private Sub UpdateContent(instance As Content)
    End Sub
  Partial Private Sub DeleteContent(instance As Content)
    End Sub
  Partial Private Sub InsertAspNetUser(instance As AspNetUser)
    End Sub
  Partial Private Sub UpdateAspNetUser(instance As AspNetUser)
    End Sub
  Partial Private Sub DeleteAspNetUser(instance As AspNetUser)
    End Sub
  Partial Private Sub InsertAspNetUserLogin(instance As AspNetUserLogin)
    End Sub
  Partial Private Sub UpdateAspNetUserLogin(instance As AspNetUserLogin)
    End Sub
  Partial Private Sub DeleteAspNetUserLogin(instance As AspNetUserLogin)
    End Sub
  Partial Private Sub InsertAspNetUserRole(instance As AspNetUserRole)
    End Sub
  Partial Private Sub UpdateAspNetUserRole(instance As AspNetUserRole)
    End Sub
  Partial Private Sub DeleteAspNetUserRole(instance As AspNetUserRole)
    End Sub
  Partial Private Sub InsertAspNetRole(instance As AspNetRole)
    End Sub
  Partial Private Sub UpdateAspNetRole(instance As AspNetRole)
    End Sub
  Partial Private Sub DeleteAspNetRole(instance As AspNetRole)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Lab2Share003.My.MySettings.Default.lab2shareConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Contents() As System.Data.Linq.Table(Of Content)
		Get
			Return Me.GetTable(Of Content)
		End Get
	End Property
	
	Public ReadOnly Property AspNetUsers() As System.Data.Linq.Table(Of AspNetUser)
		Get
			Return Me.GetTable(Of AspNetUser)
		End Get
	End Property
	
	Public ReadOnly Property AspNetUserLogins() As System.Data.Linq.Table(Of AspNetUserLogin)
		Get
			Return Me.GetTable(Of AspNetUserLogin)
		End Get
	End Property
	
	Public ReadOnly Property AspNetUserRoles() As System.Data.Linq.Table(Of AspNetUserRole)
		Get
			Return Me.GetTable(Of AspNetUserRole)
		End Get
	End Property
	
	Public ReadOnly Property AspNetRoles() As System.Data.Linq.Table(Of AspNetRole)
		Get
			Return Me.GetTable(Of AspNetRole)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Content")>  _
Partial Public Class Content
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _PageName As String
	
	Private _SectionName As String
	
	Private _SectionType As String
	
	Private _Seq As System.Nullable(Of Integer)
	
	Private _Title As String
	
	Private _Markup As String
	
	Private _ImageName As String
	
	Private _Footer As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnPageNameChanging(value As String)
    End Sub
    Partial Private Sub OnPageNameChanged()
    End Sub
    Partial Private Sub OnSectionNameChanging(value As String)
    End Sub
    Partial Private Sub OnSectionNameChanged()
    End Sub
    Partial Private Sub OnSectionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnSectionTypeChanged()
    End Sub
    Partial Private Sub OnSeqChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSeqChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnMarkupChanging(value As String)
    End Sub
    Partial Private Sub OnMarkupChanged()
    End Sub
    Partial Private Sub OnImageNameChanging(value As String)
    End Sub
    Partial Private Sub OnImageNameChanged()
    End Sub
    Partial Private Sub OnFooterChanging(value As String)
    End Sub
    Partial Private Sub OnFooterChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PageName", DbType:="VarChar(50)")>  _
	Public Property PageName() As String
		Get
			Return Me._PageName
		End Get
		Set
			If (String.Equals(Me._PageName, value) = false) Then
				Me.OnPageNameChanging(value)
				Me.SendPropertyChanging
				Me._PageName = value
				Me.SendPropertyChanged("PageName")
				Me.OnPageNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectionName", DbType:="VarChar(50)")>  _
	Public Property SectionName() As String
		Get
			Return Me._SectionName
		End Get
		Set
			If (String.Equals(Me._SectionName, value) = false) Then
				Me.OnSectionNameChanging(value)
				Me.SendPropertyChanging
				Me._SectionName = value
				Me.SendPropertyChanged("SectionName")
				Me.OnSectionNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectionType", DbType:="VarChar(50)")>  _
	Public Property SectionType() As String
		Get
			Return Me._SectionType
		End Get
		Set
			If (String.Equals(Me._SectionType, value) = false) Then
				Me.OnSectionTypeChanging(value)
				Me.SendPropertyChanging
				Me._SectionType = value
				Me.SendPropertyChanged("SectionType")
				Me.OnSectionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Seq", DbType:="Int")>  _
	Public Property Seq() As System.Nullable(Of Integer)
		Get
			Return Me._Seq
		End Get
		Set
			If (Me._Seq.Equals(value) = false) Then
				Me.OnSeqChanging(value)
				Me.SendPropertyChanging
				Me._Seq = value
				Me.SendPropertyChanged("Seq")
				Me.OnSeqChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(MAX)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Markup", DbType:="VarChar(MAX)")>  _
	Public Property Markup() As String
		Get
			Return Me._Markup
		End Get
		Set
			If (String.Equals(Me._Markup, value) = false) Then
				Me.OnMarkupChanging(value)
				Me.SendPropertyChanging
				Me._Markup = value
				Me.SendPropertyChanged("Markup")
				Me.OnMarkupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageName", DbType:="VarChar(100)")>  _
	Public Property ImageName() As String
		Get
			Return Me._ImageName
		End Get
		Set
			If (String.Equals(Me._ImageName, value) = false) Then
				Me.OnImageNameChanging(value)
				Me.SendPropertyChanging
				Me._ImageName = value
				Me.SendPropertyChanged("ImageName")
				Me.OnImageNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Footer", DbType:="VarChar(MAX)")>  _
	Public Property Footer() As String
		Get
			Return Me._Footer
		End Get
		Set
			If (String.Equals(Me._Footer, value) = false) Then
				Me.OnFooterChanging(value)
				Me.SendPropertyChanging
				Me._Footer = value
				Me.SendPropertyChanged("Footer")
				Me.OnFooterChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AspNetUsers")>  _
Partial Public Class AspNetUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _Email As String
	
	Private _EmailConfirmed As Boolean
	
	Private _PasswordHash As String
	
	Private _SecurityStamp As String
	
	Private _PhoneNumber As String
	
	Private _PhoneNumberConfirmed As Boolean
	
	Private _TwoFactorEnabled As Boolean
	
	Private _LockoutEndDateUtc As System.Nullable(Of Date)
	
	Private _LockoutEnabled As Boolean
	
	Private _AccessFailedCount As Integer
	
	Private _UserName As String
	
	Private _AspNetUserLogins As EntitySet(Of AspNetUserLogin)
	
	Private _AspNetUserRoles As EntitySet(Of AspNetUserRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnEmailConfirmedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEmailConfirmedChanged()
    End Sub
    Partial Private Sub OnPasswordHashChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordHashChanged()
    End Sub
    Partial Private Sub OnSecurityStampChanging(value As String)
    End Sub
    Partial Private Sub OnSecurityStampChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnPhoneNumberConfirmedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPhoneNumberConfirmedChanged()
    End Sub
    Partial Private Sub OnTwoFactorEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTwoFactorEnabledChanged()
    End Sub
    Partial Private Sub OnLockoutEndDateUtcChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLockoutEndDateUtcChanged()
    End Sub
    Partial Private Sub OnLockoutEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLockoutEnabledChanged()
    End Sub
    Partial Private Sub OnAccessFailedCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnAccessFailedCountChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AspNetUserLogins = New EntitySet(Of AspNetUserLogin)(AddressOf Me.attach_AspNetUserLogins, AddressOf Me.detach_AspNetUserLogins)
		Me._AspNetUserRoles = New EntitySet(Of AspNetUserRole)(AddressOf Me.attach_AspNetUserRoles, AddressOf Me.detach_AspNetUserRoles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailConfirmed", DbType:="Bit NOT NULL")>  _
	Public Property EmailConfirmed() As Boolean
		Get
			Return Me._EmailConfirmed
		End Get
		Set
			If ((Me._EmailConfirmed = value)  _
						= false) Then
				Me.OnEmailConfirmedChanging(value)
				Me.SendPropertyChanging
				Me._EmailConfirmed = value
				Me.SendPropertyChanged("EmailConfirmed")
				Me.OnEmailConfirmedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordHash", DbType:="NVarChar(MAX)")>  _
	Public Property PasswordHash() As String
		Get
			Return Me._PasswordHash
		End Get
		Set
			If (String.Equals(Me._PasswordHash, value) = false) Then
				Me.OnPasswordHashChanging(value)
				Me.SendPropertyChanging
				Me._PasswordHash = value
				Me.SendPropertyChanged("PasswordHash")
				Me.OnPasswordHashChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecurityStamp", DbType:="NVarChar(MAX)")>  _
	Public Property SecurityStamp() As String
		Get
			Return Me._SecurityStamp
		End Get
		Set
			If (String.Equals(Me._SecurityStamp, value) = false) Then
				Me.OnSecurityStampChanging(value)
				Me.SendPropertyChanging
				Me._SecurityStamp = value
				Me.SendPropertyChanged("SecurityStamp")
				Me.OnSecurityStampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="NVarChar(MAX)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumberConfirmed", DbType:="Bit NOT NULL")>  _
	Public Property PhoneNumberConfirmed() As Boolean
		Get
			Return Me._PhoneNumberConfirmed
		End Get
		Set
			If ((Me._PhoneNumberConfirmed = value)  _
						= false) Then
				Me.OnPhoneNumberConfirmedChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumberConfirmed = value
				Me.SendPropertyChanged("PhoneNumberConfirmed")
				Me.OnPhoneNumberConfirmedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TwoFactorEnabled", DbType:="Bit NOT NULL")>  _
	Public Property TwoFactorEnabled() As Boolean
		Get
			Return Me._TwoFactorEnabled
		End Get
		Set
			If ((Me._TwoFactorEnabled = value)  _
						= false) Then
				Me.OnTwoFactorEnabledChanging(value)
				Me.SendPropertyChanging
				Me._TwoFactorEnabled = value
				Me.SendPropertyChanged("TwoFactorEnabled")
				Me.OnTwoFactorEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LockoutEndDateUtc", DbType:="DateTime")>  _
	Public Property LockoutEndDateUtc() As System.Nullable(Of Date)
		Get
			Return Me._LockoutEndDateUtc
		End Get
		Set
			If (Me._LockoutEndDateUtc.Equals(value) = false) Then
				Me.OnLockoutEndDateUtcChanging(value)
				Me.SendPropertyChanging
				Me._LockoutEndDateUtc = value
				Me.SendPropertyChanged("LockoutEndDateUtc")
				Me.OnLockoutEndDateUtcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LockoutEnabled", DbType:="Bit NOT NULL")>  _
	Public Property LockoutEnabled() As Boolean
		Get
			Return Me._LockoutEnabled
		End Get
		Set
			If ((Me._LockoutEnabled = value)  _
						= false) Then
				Me.OnLockoutEnabledChanging(value)
				Me.SendPropertyChanging
				Me._LockoutEnabled = value
				Me.SendPropertyChanged("LockoutEnabled")
				Me.OnLockoutEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccessFailedCount", DbType:="Int NOT NULL")>  _
	Public Property AccessFailedCount() As Integer
		Get
			Return Me._AccessFailedCount
		End Get
		Set
			If ((Me._AccessFailedCount = value)  _
						= false) Then
				Me.OnAccessFailedCountChanging(value)
				Me.SendPropertyChanging
				Me._AccessFailedCount = value
				Me.SendPropertyChanged("AccessFailedCount")
				Me.OnAccessFailedCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AspNetUser_AspNetUserLogin", Storage:="_AspNetUserLogins", ThisKey:="Id", OtherKey:="UserId")>  _
	Public Property AspNetUserLogins() As EntitySet(Of AspNetUserLogin)
		Get
			Return Me._AspNetUserLogins
		End Get
		Set
			Me._AspNetUserLogins.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AspNetUser_AspNetUserRole", Storage:="_AspNetUserRoles", ThisKey:="Id", OtherKey:="UserId")>  _
	Public Property AspNetUserRoles() As EntitySet(Of AspNetUserRole)
		Get
			Return Me._AspNetUserRoles
		End Get
		Set
			Me._AspNetUserRoles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AspNetUserLogins(ByVal entity As AspNetUserLogin)
		Me.SendPropertyChanging
		entity.AspNetUser = Me
	End Sub
	
	Private Sub detach_AspNetUserLogins(ByVal entity As AspNetUserLogin)
		Me.SendPropertyChanging
		entity.AspNetUser = Nothing
	End Sub
	
	Private Sub attach_AspNetUserRoles(ByVal entity As AspNetUserRole)
		Me.SendPropertyChanging
		entity.AspNetUser = Me
	End Sub
	
	Private Sub detach_AspNetUserRoles(ByVal entity As AspNetUserRole)
		Me.SendPropertyChanging
		entity.AspNetUser = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AspNetUserLogins")>  _
Partial Public Class AspNetUserLogin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LoginProvider As String
	
	Private _ProviderKey As String
	
	Private _UserId As String
	
	Private _AspNetUser As EntityRef(Of AspNetUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLoginProviderChanging(value As String)
    End Sub
    Partial Private Sub OnLoginProviderChanged()
    End Sub
    Partial Private Sub OnProviderKeyChanging(value As String)
    End Sub
    Partial Private Sub OnProviderKeyChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As String)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AspNetUser = CType(Nothing, EntityRef(Of AspNetUser))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginProvider", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property LoginProvider() As String
		Get
			Return Me._LoginProvider
		End Get
		Set
			If (String.Equals(Me._LoginProvider, value) = false) Then
				Me.OnLoginProviderChanging(value)
				Me.SendPropertyChanging
				Me._LoginProvider = value
				Me.SendPropertyChanged("LoginProvider")
				Me.OnLoginProviderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProviderKey", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ProviderKey() As String
		Get
			Return Me._ProviderKey
		End Get
		Set
			If (String.Equals(Me._ProviderKey, value) = false) Then
				Me.OnProviderKeyChanging(value)
				Me.SendPropertyChanging
				Me._ProviderKey = value
				Me.SendPropertyChanged("ProviderKey")
				Me.OnProviderKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserId() As String
		Get
			Return Me._UserId
		End Get
		Set
			If (String.Equals(Me._UserId, value) = false) Then
				If Me._AspNetUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AspNetUser_AspNetUserLogin", Storage:="_AspNetUser", ThisKey:="UserId", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property AspNetUser() As AspNetUser
		Get
			Return Me._AspNetUser.Entity
		End Get
		Set
			Dim previousValue As AspNetUser = Me._AspNetUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AspNetUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AspNetUser.Entity = Nothing
					previousValue.AspNetUserLogins.Remove(Me)
				End If
				Me._AspNetUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AspNetUserLogins.Add(Me)
					Me._UserId = value.Id
				Else
					Me._UserId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("AspNetUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AspNetUserRoles")>  _
Partial Public Class AspNetUserRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As String
	
	Private _RoleId As String
	
	Private _AspNetUser As EntityRef(Of AspNetUser)
	
	Private _AspNetRole As EntityRef(Of AspNetRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As String)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As String)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AspNetUser = CType(Nothing, EntityRef(Of AspNetUser))
		Me._AspNetRole = CType(Nothing, EntityRef(Of AspNetRole))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserId() As String
		Get
			Return Me._UserId
		End Get
		Set
			If (String.Equals(Me._UserId, value) = false) Then
				If Me._AspNetUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property RoleId() As String
		Get
			Return Me._RoleId
		End Get
		Set
			If (String.Equals(Me._RoleId, value) = false) Then
				If Me._AspNetRole.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._RoleId = value
				Me.SendPropertyChanged("RoleId")
				Me.OnRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AspNetUser_AspNetUserRole", Storage:="_AspNetUser", ThisKey:="UserId", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property AspNetUser() As AspNetUser
		Get
			Return Me._AspNetUser.Entity
		End Get
		Set
			Dim previousValue As AspNetUser = Me._AspNetUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AspNetUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AspNetUser.Entity = Nothing
					previousValue.AspNetUserRoles.Remove(Me)
				End If
				Me._AspNetUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AspNetUserRoles.Add(Me)
					Me._UserId = value.Id
				Else
					Me._UserId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("AspNetUser")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AspNetRole_AspNetUserRole", Storage:="_AspNetRole", ThisKey:="RoleId", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property AspNetRole() As AspNetRole
		Get
			Return Me._AspNetRole.Entity
		End Get
		Set
			Dim previousValue As AspNetRole = Me._AspNetRole.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AspNetRole.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AspNetRole.Entity = Nothing
					previousValue.AspNetUserRoles.Remove(Me)
				End If
				Me._AspNetRole.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AspNetUserRoles.Add(Me)
					Me._RoleId = value.Id
				Else
					Me._RoleId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("AspNetRole")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AspNetRoles")>  _
Partial Public Class AspNetRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _Name As String
	
	Private _AspNetUserRoles As EntitySet(Of AspNetUserRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AspNetUserRoles = New EntitySet(Of AspNetUserRole)(AddressOf Me.attach_AspNetUserRoles, AddressOf Me.detach_AspNetUserRoles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AspNetRole_AspNetUserRole", Storage:="_AspNetUserRoles", ThisKey:="Id", OtherKey:="RoleId")>  _
	Public Property AspNetUserRoles() As EntitySet(Of AspNetUserRole)
		Get
			Return Me._AspNetUserRoles
		End Get
		Set
			Me._AspNetUserRoles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AspNetUserRoles(ByVal entity As AspNetUserRole)
		Me.SendPropertyChanging
		entity.AspNetRole = Me
	End Sub
	
	Private Sub detach_AspNetUserRoles(ByVal entity As AspNetUserRole)
		Me.SendPropertyChanging
		entity.AspNetRole = Nothing
	End Sub
End Class
